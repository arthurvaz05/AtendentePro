#!/usr/bin/env python3
"""
Input Guardrails Gen√©rico para AtendentePro
Sistema de seguran√ßa reutiliz√°vel que carrega configura√ß√µes espec√≠ficas do cliente
"""

import json
import re
import yaml
from typing import Dict, List, Any
from pathlib import Path
from agents import (
    ToolInputGuardrailData,
    ToolGuardrailFunctionOutput,
    tool_input_guardrail,
)


class GuardrailConfig:
    """Carrega configura√ß√µes de guardrails do template do cliente"""
    
    def __init__(self, client_template_path: str = "Template/White_Martins"):
        self.client_path = Path(__file__).parent / client_template_path
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """Carrega configura√ß√µes do arquivo guardrails_config.yaml"""
        config_file = self.client_path / "guardrails_config.yaml"
        
        if not config_file.exists():
            # Configura√ß√£o padr√£o se arquivo n√£o existir
            return self._get_default_config()
        
        with open(config_file, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def _get_default_config(self) -> Dict[str, Any]:
        """Configura√ß√£o padr√£o gen√©rica"""
        return {
            "sensitive_words": [
                "password", "senha", "token", "key", "secret",
                "hack", "exploit", "malware", "virus",
            ],
            "off_topic_keywords": [
                "bitcoin", "criptomoeda", "investimento",
                "pol√≠tica", "elei√ß√£o", "governo",
                "religi√£o", "deus", "jesus",
                "futebol", "esporte", "jogo",
            ],
            "suspicious_patterns": [
                r"delete\s+.*",
                r"drop\s+.*", 
                r"exec\s+.*",
                r"eval\s+.*",
                r"system\s+.*",
            ],
            "valid_codes": [],
            "min_message_length": 3,
            "spam_patterns": [
                r'(.)\1{4,}',  # Repeti√ß√£o excessiva
            ]
        }
    
    def get_sensitive_words(self) -> List[str]:
        """Retorna lista de palavras sens√≠veis"""
        return self.config.get("sensitive_words", [])
    
    def get_off_topic_keywords(self) -> List[str]:
        """Retorna lista de palavras fora do escopo"""
        return self.config.get("off_topic_keywords", [])
    
    def get_suspicious_patterns(self) -> List[str]:
        """Retorna lista de padr√µes suspeitos"""
        return self.config.get("suspicious_patterns", [])
    
    def get_valid_codes(self) -> List[str]:
        """Retorna lista de c√≥digos v√°lidos"""
        return self.config.get("valid_codes", [])
    
    def get_topics(self) -> Dict[str, Dict[str, Any]]:
        """Retorna estrutura de t√≥picos com c√≥digos"""
        return self.config.get("topics", {})
    
    def get_codes_for_topic(self, topic_name: str) -> List[str]:
        """Retorna c√≥digos v√°lidos para um t√≥pico espec√≠fico"""
        topics = self.get_topics()
        if topic_name in topics:
            return topics[topic_name].get("codes", [])
        return []
    
    def get_all_valid_codes_from_topics(self) -> List[str]:
        """Retorna todos os c√≥digos v√°lidos de todos os t√≥picos"""
        all_codes = []
        topics = self.get_topics()
        for topic_data in topics.values():
            all_codes.extend(topic_data.get("codes", []))
        return list(set(all_codes))  # Remove duplicatas
    
    def get_min_message_length(self) -> int:
        """Retorna tamanho m√≠nimo de mensagem"""
        return self.config.get("min_message_length", 3)
    
    def get_spam_patterns(self) -> List[str]:
        """Retorna lista de padr√µes de spam"""
        return self.config.get("spam_patterns", [])


# Inst√¢ncia global da configura√ß√£o
guardrail_config = GuardrailConfig()


@tool_input_guardrail
def reject_sensitive_content(data: ToolInputGuardrailData) -> ToolGuardrailFunctionOutput:
    """
    Rejeita chamadas de ferramenta que contenham conte√∫do sens√≠vel.
    Configura√ß√µes carregadas dinamicamente do template do cliente.
    """
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return ToolGuardrailFunctionOutput(output_info="Argumentos JSON inv√°lidos")

    sensitive_words = guardrail_config.get_sensitive_words()
    suspicious_patterns = guardrail_config.get_suspicious_patterns()

    # Verificar palavras sens√≠veis
    for key, value in args.items():
        value_str = str(value).lower()
        
        # Verificar palavras sens√≠veis
        for word in sensitive_words:
            if word.lower() in value_str:
                return ToolGuardrailFunctionOutput.reject_content(
                    message=f"üö® Chamada de ferramenta bloqueada: cont√©m '{word}'",
                    output_info={
                        "blocked_word": word,
                        "argument": key,
                        "reason": "conteudo_sensivel"
                    },
                )
        
        # Verificar padr√µes suspeitos
        for pattern in suspicious_patterns:
            if re.search(pattern, value_str, re.IGNORECASE):
                return ToolGuardrailFunctionOutput.reject_content(
                    message=f"üö® Chamada de ferramenta bloqueada: padr√£o suspeito detectado",
                    output_info={
                        "blocked_pattern": pattern,
                        "argument": key,
                        "reason": "padrao_suspeito"
                    },
                )

    return ToolGuardrailFunctionOutput(output_info="Entrada validada com sucesso")


@tool_input_guardrail
def reject_off_topic_queries(data: ToolInputGuardrailData) -> ToolGuardrailFunctionOutput:
    """
    Rejeita consultas fora do escopo da aplica√ß√£o.
    Escopo definido dinamicamente pelo template do cliente.
    """
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return ToolGuardrailFunctionOutput(output_info="Argumentos JSON inv√°lidos")

    off_topic_keywords = guardrail_config.get_off_topic_keywords()

    # Verificar t√≥picos fora do escopo
    for key, value in args.items():
        value_str = str(value).lower()
        
        for keyword in off_topic_keywords:
            if keyword.lower() in value_str:
                return ToolGuardrailFunctionOutput.reject_content(
                    message=f"üö® Consulta fora do escopo: '{keyword}' n√£o √© relacionado aos servi√ßos da empresa",
                    output_info={
                        "off_topic_keyword": keyword,
                        "argument": key,
                        "reason": "fora_do_escopo",
                        "suggestion": "Por favor, fa√ßa perguntas relacionadas aos servi√ßos da empresa."
                    },
                )

    return ToolGuardrailFunctionOutput(output_info="Consulta dentro do escopo v√°lido")


@tool_input_guardrail
def validate_business_codes(data: ToolInputGuardrailData) -> ToolGuardrailFunctionOutput:
    """
    Valida c√≥digos espec√≠ficos do neg√≥cio mencionados nas consultas.
    C√≥digos v√°lidos definidos dinamicamente pelo template do cliente.
    """
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return ToolGuardrailFunctionOutput(output_info="Argumentos JSON inv√°lidos")

    # Usar c√≥digos dos t√≥picos se dispon√≠vel, sen√£o usar lista consolidada
    valid_codes = guardrail_config.get_all_valid_codes_from_topics()
    if not valid_codes:
        valid_codes = guardrail_config.get_valid_codes()
    
    # Se n√£o h√° c√≥digos configurados, n√£o validar
    if not valid_codes:
        return ToolGuardrailFunctionOutput(output_info="Valida√ß√£o de c√≥digos n√£o configurada")

    for key, value in args.items():
        value_str = str(value)
        
        # Procurar por c√≥digos IVA no texto (padr√£o espec√≠fico para IVA)
        code_pattern = r'\b([A-Za-z]\d|[A-Za-z]{2})\b'  # Aceitar mai√∫sculas e min√∫sculas
        matches = re.findall(code_pattern, value_str)
        matches = [match.upper() for match in matches]  # Converter para mai√∫sculas
        
        for match in matches:
            if match not in valid_codes:
                return ToolGuardrailFunctionOutput.reject_content(
                    message=f"üö® C√≥digo IVA inv√°lido: '{match}' n√£o √© um c√≥digo v√°lido",
                    output_info={
                        "invalid_code": match,
                        "argument": key,
                        "reason": "codigo_iva_invalido",
                        "valid_codes_sample": valid_codes[:10]  # Mostrar apenas alguns exemplos
                    },
                )

    return ToolGuardrailFunctionOutput(output_info="C√≥digos IVA validados")


@tool_input_guardrail
def validate_topic_and_codes(data: ToolInputGuardrailData) -> ToolGuardrailFunctionOutput:
    """
    Valida t√≥picos e c√≥digos espec√≠ficos por t√≥pico.
    Valida√ß√£o baseada na estrutura de t√≥picos do template do cliente.
    """
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return ToolGuardrailFunctionOutput(output_info="Argumentos JSON inv√°lidos")

    topics = guardrail_config.get_topics()
    
    # Se n√£o h√° t√≥picos configurados, n√£o validar
    if not topics:
        return ToolGuardrailFunctionOutput(output_info="Valida√ß√£o de t√≥picos n√£o configurada")

    for key, value in args.items():
        value_str = str(value).lower()
        
        # Procurar por c√≥digos IVA no texto
        code_pattern = r'\b([A-Za-z]\d|[A-Za-z]{2})\b'  # Aceitar mai√∫sculas e min√∫sculas
        matches = re.findall(code_pattern, value_str)
        matches = [match.upper() for match in matches]  # Converter para mai√∫sculas
        
        if matches:
            # Para cada c√≥digo encontrado, verificar se est√° no t√≥pico correto
            for code in matches:
                code_found_in_topic = False
                topic_for_code = None
                
                # Encontrar em qual t√≥pico o c√≥digo est√°
                for topic_name, topic_data in topics.items():
                    if code in topic_data.get("codes", []):
                        code_found_in_topic = True
                        topic_for_code = topic_name
                        break
                
                if not code_found_in_topic:
                    return ToolGuardrailFunctionOutput.reject_content(
                        message=f"üö® C√≥digo IVA '{code}' n√£o encontrado em nenhum t√≥pico v√°lido",
                        output_info={
                            "invalid_code": code,
                            "argument": key,
                            "reason": "codigo_nao_encontrado_em_topicos",
                            "available_topics": list(topics.keys())
                        },
                    )
                
                # Verificar se o contexto da pergunta corresponde ao t√≥pico do c√≥digo
                topic_description = topics[topic_for_code].get("description", "").lower()
                
                # Palavras-chave que indicam contexto do t√≥pico
                topic_keywords = {
                    "compra_industrializacao": ["industrializa√ß√£o", "industrial", "produ√ß√£o", "manufaturado"],
                    "compra_comercializacao": ["comercializa√ß√£o", "revenda", "comercial"],
                    "compra_ativo_operacional": ["ativo operacional", "m√°quina", "equipamento", "cilindro"],
                    "compra_ativo_projeto": ["ativo projeto", "projeto", "andamento"],
                    "consumo_administrativo_ativo_nao_operacional": ["administrativo", "escrit√≥rio", "limpeza", "ti"],
                    "aquisicao_frete": ["frete", "transporte", "log√≠stica"],
                    "aquisicao_energia_eletrica": ["energia", "el√©trica", "eletricidade"],
                    "aquisicao_servicos_ligados_a_operacao": ["servi√ßo opera√ß√£o", "manuten√ß√£o", "assist√™ncia", "engenharia"],
                    "aquisicao_servicos_nao_ligados_a_operacao": ["servi√ßo n√£o opera√ß√£o", "consultoria", "auditoria", "inspe√ß√£o"]
                }
                
                # Verificar se o contexto da pergunta corresponde ao t√≥pico
                context_matches = False
                if topic_for_code in topic_keywords:
                    for keyword in topic_keywords[topic_for_code]:
                        if keyword in value_str:
                            context_matches = True
                            break
                
                if not context_matches:
                    return ToolGuardrailFunctionOutput.reject_content(
                        message=f"üö® C√≥digo IVA '{code}' n√£o corresponde ao contexto da pergunta. Este c√≥digo √© para: {topic_description}",
                        output_info={
                            "code": code,
                            "expected_topic": topic_for_code,
                            "topic_description": topic_description,
                            "argument": key,
                            "reason": "codigo_contexto_incompativel"
                        },
                    )

    return ToolGuardrailFunctionOutput(output_info="T√≥picos e c√≥digos validados")


@tool_input_guardrail
def detect_spam_patterns(data: ToolInputGuardrailData) -> ToolGuardrailFunctionOutput:
    """
    Detecta padr√µes de spam ou mensagens repetitivas.
    Padr√µes configur√°veis pelo template do cliente.
    """
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return ToolGuardrailFunctionOutput(output_info="Argumentos JSON inv√°lidos")

    spam_patterns = guardrail_config.get_spam_patterns()
    min_length = guardrail_config.get_min_message_length()

    for key, value in args.items():
        value_str = str(value)
        
        # Detectar padr√µes de spam configurados
        for pattern in spam_patterns:
            if re.search(pattern, value_str):
                return ToolGuardrailFunctionOutput.reject_content(
                    message="üö® Mensagem bloqueada: padr√£o de spam detectado",
                    output_info={
                        "argument": key,
                        "reason": "padrao_spam",
                        "detected_pattern": pattern
                    },
                )
        
        # Detectar mensagens muito curtas
        if len(value_str.strip()) < min_length:
            return ToolGuardrailFunctionOutput.reject_content(
                message=f"üö® Mensagem muito curta: forne√ßa mais detalhes (m√≠nimo {min_length} caracteres)",
                output_info={
                    "argument": key,
                    "reason": "mensagem_muito_curta",
                    "min_length": min_length
                },
            )

    return ToolGuardrailFunctionOutput(output_info="Padr√µes de spam verificados")


# Lista de todos os guardrails dispon√≠veis
AVAILABLE_GUARDRAILS = [
    reject_sensitive_content,
    reject_off_topic_queries,
    validate_business_codes,
    validate_topic_and_codes,
    detect_spam_patterns,
]


def get_guardrails_for_agent(agent_name: str) -> List:
    """
    Retorna os guardrails apropriados para cada agente.
    Configura√ß√£o carregada dinamicamente do template do cliente.
    """
    # Configura√ß√£o padr√£o gen√©rica
    default_guardrails_map = {
        "Triage Agent": [reject_off_topic_queries, detect_spam_patterns],
        "Flow Agent": [reject_off_topic_queries],
        "Interview Agent": [reject_sensitive_content],
        "Answer Agent": [reject_sensitive_content, validate_topic_and_codes],
        "Confirmation Agent": [reject_sensitive_content],
        "Knowledge Agent": [reject_off_topic_queries, detect_spam_patterns],
        "Usage Agent": [detect_spam_patterns],
    }
    
    # Tentar carregar configura√ß√£o espec√≠fica do cliente
    try:
        client_config_file = guardrail_config.client_path / "agent_guardrails_config.yaml"
        if client_config_file.exists():
            with open(client_config_file, 'r', encoding='utf-8') as f:
                client_config = yaml.safe_load(f)
                return client_config.get(agent_name, default_guardrails_map.get(agent_name, [reject_sensitive_content]))
    except Exception:
        pass  # Usar configura√ß√£o padr√£o se houver erro
    
    return default_guardrails_map.get(agent_name, [reject_sensitive_content])


def reload_config():
    """Recarrega configura√ß√µes do template do cliente"""
    global guardrail_config
    guardrail_config = GuardrailConfig()


if __name__ == "__main__":
    print("üõ°Ô∏è Input Guardrails Gen√©rico para AtendentePro")
    print(f"Configura√ß√£o carregada de: {guardrail_config.client_path}")
    print(f"Guardrails dispon√≠veis: {len(AVAILABLE_GUARDRAILS)}")
    print("‚úÖ Sistema de seguran√ßa ativo e configur√°vel")