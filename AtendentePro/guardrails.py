#!/usr/bin/env python3
"""
Input Guardrails Especializados com IA
Sistema ultra-simplificado que usa apenas descri√ß√µes de agentes
Toda valida√ß√£o √© feita pela IA baseada na descri√ß√£o do agente
"""

import json
import yaml
from typing import Dict, List, Any
from pathlib import Path
from agents import (
    ToolInputGuardrailData,
    ToolGuardrailFunctionOutput,
    tool_input_guardrail,
)
from openai import OpenAI
import os


class GuardrailConfig:
    """Carrega apenas descri√ß√µes de agentes do template do cliente"""
    
    def __init__(self, client_template_path: str = "Template/White_Martins"):
        self.client_path = Path(__file__).parent / client_template_path
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """Carrega apenas descri√ß√µes de agentes"""
        config_file = self.client_path / "guardrails_config.yaml"
        
        if not config_file.exists():
            return self._get_default_config()
        
        with open(config_file, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def _get_default_config(self) -> Dict[str, Any]:
        """Configura√ß√£o padr√£o gen√©rica"""
        return {
            "agent_scope_descriptions": {
                "Triage Agent": {
                    "description": "Agente de triagem que roteia conversas para agentes especializados"
                },
                "Flow Agent": {
                    "description": "Agente de fluxo que identifica t√≥picos espec√≠ficos"
                },
                "Interview Agent": {
                    "description": "Agente de entrevista que coleta informa√ß√µes detalhadas"
                },
                "Answer Agent": {
                    "description": "Agente de resposta que fornece informa√ß√µes e solu√ß√µes"
                },
                "Confirmation Agent": {
                    "description": "Agente de confirma√ß√£o que valida informa√ß√µes"
                },
                "Knowledge Agent": {
                    "description": "Agente de conhecimento que consulta documenta√ß√£o"
                },
                "Usage Agent": {
                    "description": "Agente de uso que explica funcionalidades do sistema"
                }
            }
        }
    
    def get_agent_description(self, agent_name: str) -> str:
        """Retorna apenas a descri√ß√£o do agente"""
        descriptions = self.config.get("agent_scope_descriptions", {})
        if agent_name in descriptions:
            return descriptions[agent_name].get("description", "")
        return ""
    
    def get_agent_scope(self, agent_name: str) -> str:
        """Retorna o escopo espec√≠fico de um agente"""
        descriptions = self.config.get("agent_scope_descriptions", {})
        if agent_name in descriptions:
            return descriptions[agent_name].get("scope", "")
        return ""
    
    def get_topics(self) -> Dict[str, Dict[str, Any]]:
        """Retorna a estrutura de t√≥picos e c√≥digos"""
        return self.config.get("topics", {})


# Inst√¢ncia global da configura√ß√£o
guardrail_config = GuardrailConfig()

# Cliente OpenAI para avalia√ß√£o de conte√∫do
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY', ''))


def evaluate_content_with_ai(user_message: str, agent_name: str, agent_description: str, agent_scope: str, topics: Dict[str, Dict[str, Any]]) -> Dict[str, Any]:
    """
    Usa IA para avaliar se o conte√∫do da mensagem √© permitido para o agente.
    Avalia TUDO baseado na descri√ß√£o, escopo e t√≥picos do agente.
    
    Args:
        user_message: Mensagem do usu√°rio
        agent_name: Nome do agente
        agent_description: Descri√ß√£o completa do agente
        agent_scope: Escopo espec√≠fico do agente
        topics: Estrutura de t√≥picos e c√≥digos v√°lidos
    
    Returns:
        Dict com resultado da avalia√ß√£o
    """
    
    # Preparar informa√ß√µes sobre t√≥picos para a IA
    topics_info = ""
    if topics:
        topics_info = "\n\nT√ìPICOS E C√ìDIGOS V√ÅLIDOS:\n"
        for topic_key, topic_data in topics.items():
            topic_desc = topic_data.get("description", "")
            codes = topic_data.get("codes", [])
            topics_info += f"- {topic_desc}: {', '.join(codes)}\n"
    
    prompt = f"""
Voc√™ √© um especialista em an√°lise de conte√∫do para sistemas de atendimento empresarial.

TAREFA: Avaliar se a mensagem do usu√°rio √© permitida para o agente espec√≠fico.

AGENTE: {agent_name}
DESCRI√á√ÉO: {agent_description}
ESCOPO: {agent_scope}
{topics_info}

MENSAGEM DO USU√ÅRIO: "{user_message}"

INSTRU√á√ïES:
1. Analise se a mensagem est√° relacionada √† descri√ß√£o e escopo do agente
2. Verifique se cont√©m conte√∫do sens√≠vel (senhas, hacking, fraudes, palavr√µes, informa√ß√µes pessoais)
3. Detecte padr√µes de spam ou mensagens muito curtas
4. Valide c√≥digos espec√≠ficos mencionados (se houver) usando os t√≥picos fornecidos
5. Considere o contexto empresarial e dom√≠nio de neg√≥cio
6. Seja rigoroso mas justo na avalia√ß√£o
7. Responda APENAS com JSON v√°lido

CRIT√âRIOS DE AVALIA√á√ÉO:
- ‚úÖ APROVADO: Mensagem v√°lida, dentro do escopo da descri√ß√£o, sem conte√∫do sens√≠vel
- ‚ùå REJEITADO: Mensagem fora do escopo, conte√∫do sens√≠vel, spam, ou c√≥digos inv√°lidos

RESPOSTA (JSON):
{{
    "approved": true/false,
    "reason": "explica√ß√£o breve da decis√£o",
    "confidence": 0.0-1.0,
    "category": "escopo|conteudo_sensivel|spam|codigo_invalido|outro",
    "suggested_action": "a√ß√£o sugerida se rejeitado"
}}
"""

    try:
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de conte√∫do empresarial. Responda APENAS com JSON v√°lido."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            max_tokens=300
        )
        
        result_text = response.choices[0].message.content.strip()
        
        # Tentar extrair JSON da resposta
        try:
            result = json.loads(result_text)
        except json.JSONDecodeError:
            # Se n√£o conseguir fazer parse do JSON, tentar extrair manualmente
            if "approved" in result_text.lower() and "true" in result_text.lower():
                result = {"approved": True, "reason": "Aprovado por IA", "confidence": 0.8, "category": "aprovado"}
            elif "approved" in result_text.lower() and "false" in result_text.lower():
                result = {"approved": False, "reason": "Rejeitado por IA", "confidence": 0.8, "category": "rejeitado"}
            else:
                result = {"approved": True, "reason": "Falha na an√°lise - permitindo", "confidence": 0.5, "category": "fallback"}
        
        return result
        
    except Exception as e:
        # Em caso de erro, permitir (fail-safe)
        return {
            "approved": True,
            "reason": f"Erro na avalia√ß√£o IA: {str(e)} - permitindo por seguran√ßa",
            "confidence": 0.3,
            "category": "erro"
        }


@tool_input_guardrail
def validate_content_with_ai(data: ToolInputGuardrailData) -> ToolGuardrailFunctionOutput:
    """
    Valida todo o conte√∫do da mensagem usando IA.
    Usa apenas a descri√ß√£o do agente para fazer toda a an√°lise.
    """
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return ToolGuardrailFunctionOutput(output_info="Argumentos JSON inv√°lidos")

    # Obter o nome do agente atual (se dispon√≠vel no contexto)
    agent_name = getattr(data.context, 'agent_name', 'Triage Agent')
    
    # Obter descri√ß√£o, escopo e t√≥picos do agente
    agent_description = guardrail_config.get_agent_description(agent_name)
    agent_scope = guardrail_config.get_agent_scope(agent_name)
    topics = guardrail_config.get_topics()
    
    if not agent_description:
        # Se n√£o h√° descri√ß√£o definida, permitir (fallback)
        return ToolGuardrailFunctionOutput(output_info="Descri√ß√£o n√£o definida - permitindo")

    # Extrair mensagem do usu√°rio dos argumentos
    user_message = ""
    for key, value in args.items():
        if isinstance(value, str) and len(value.strip()) > 0:
            user_message = value.strip()
            break
    
    if not user_message:
        return ToolGuardrailFunctionOutput(output_info="Mensagem vazia - permitindo")

    # Usar IA para avaliar todo o conte√∫do baseado na descri√ß√£o, escopo e t√≥picos
    ai_evaluation = evaluate_content_with_ai(user_message, agent_name, agent_description, agent_scope, topics)
    
    if not ai_evaluation.get("approved", True):
        # IA rejeitou a mensagem
        reason = ai_evaluation.get("reason", "Conte√∫do n√£o permitido")
        confidence = ai_evaluation.get("confidence", 0.8)
        category = ai_evaluation.get("category", "outro")
        suggested_action = ai_evaluation.get("suggested_action", f"Fa√ßa perguntas relacionadas ao escopo do {agent_name}")
        
        return ToolGuardrailFunctionOutput.reject_content(
            message=f"üö® Mensagem bloqueada pelo {agent_name}: {reason}",
            output_info={
                "user_message": user_message,
                "agent_name": agent_name,
                "agent_description": agent_description,
                "agent_scope": agent_scope,
                "topics_available": list(topics.keys()) if topics else [],
                "ai_reason": reason,
                "ai_confidence": confidence,
                "ai_category": category,
                "suggested_action": suggested_action,
                "reason": f"conteudo_nao_permitido_{category}",
                "suggestion": suggested_action
            },
        )
    
    # IA aprovou a mensagem
    reason = ai_evaluation.get("reason", "Conte√∫do aprovado")
    confidence = ai_evaluation.get("confidence", 0.8)
    category = ai_evaluation.get("category", "aprovado")
    
    return ToolGuardrailFunctionOutput(
        output_info=f"Mensagem aprovada pelo {agent_name}: {reason} (confian√ßa: {confidence:.2f}, categoria: {category})"
    )


# Lista de todos os guardrails dispon√≠veis - APENAS IA
AVAILABLE_GUARDRAILS = [
    validate_content_with_ai,  # √önica fun√ß√£o de valida√ß√£o com IA
]


def get_guardrails_for_agent(agent_name: str) -> List:
    """
    Retorna os guardrails apropriados para cada agente.
    Configura√ß√£o carregada dinamicamente do template do cliente.
    """
    # Configura√ß√£o padr√£o gen√©rica - apenas IA
    default_guardrails_map = {
        "Triage Agent": [validate_content_with_ai],
        "Flow Agent": [validate_content_with_ai],
        "Interview Agent": [validate_content_with_ai],
        "Answer Agent": [validate_content_with_ai],
        "Confirmation Agent": [validate_content_with_ai],
        "Knowledge Agent": [validate_content_with_ai],
        "Usage Agent": [validate_content_with_ai],
    }
    
    # Tentar carregar configura√ß√£o espec√≠fica do cliente
    try:
        client_config_file = guardrail_config.client_path / "agent_guardrails_config.yaml"
        if client_config_file.exists():
            with open(client_config_file, 'r', encoding='utf-8') as f:
                client_config = yaml.safe_load(f)
                return client_config.get(agent_name, default_guardrails_map.get(agent_name, [validate_content_with_ai]))
    except Exception:
        pass  # Usar configura√ß√£o padr√£o se houver erro
    
    return default_guardrails_map.get(agent_name, [validate_content_with_ai])


def reload_config():
    """Recarrega configura√ß√µes do template do cliente"""
    global guardrail_config
    guardrail_config = GuardrailConfig()


if __name__ == "__main__":
    print("ü§ñ Input Guardrails Especializados com IA")
    print(f"Configura√ß√£o carregada de: {guardrail_config.client_path}")
    print(f"Guardrails dispon√≠veis: {len(AVAILABLE_GUARDRAILS)}")
    print("‚úÖ Sistema especializado usando descri√ß√µes, escopos e t√≥picos de agentes")