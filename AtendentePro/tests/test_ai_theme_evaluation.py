#!/usr/bin/env python3
"""
Teste da nova avalia√ß√£o de tema baseada em IA
"""

import sys
from pathlib import Path
import os

# Adicionar o diret√≥rio pai ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

# Configurar API key para teste
os.environ['OPENAI_API_KEY'] = 'sk-proj-your-key-here'  # Substitua pela sua chave

def test_ai_theme_evaluation():
    """Testa a nova fun√ß√£o de avalia√ß√£o de tema usando IA"""
    
    print("ü§ñ TESTE DA AVALIA√á√ÉO DE TEMA BASEADA EM IA")
    print("=" * 60)
    
    # Importar a fun√ß√£o de avalia√ß√£o
    try:
        from AtendentePro.guardrails import evaluate_theme_with_ai
        print("‚úÖ Fun√ß√£o de avalia√ß√£o importada com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar fun√ß√£o: {e}")
        return
    
    # Casos de teste
    test_cases = [
        {
            "agent": "Triage Agent",
            "scope": "Tributa√ß√£o, IVA, energia el√©trica, compras empresariais, ativos, frete, servi√ßos da empresa",
            "description": "Agente de triagem que roteia conversas para agentes especializados",
            "message": "quem descobriu o brasil?",
            "expected": False,
            "description_test": "Pergunta hist√≥rica fora do escopo"
        },
        {
            "agent": "Answer Agent",
            "scope": "C√≥digos IVA espec√≠ficos, regras tribut√°rias, tipos de fornecedor, opera√ß√µes empresariais",
            "description": "Agente de resposta que fornece informa√ß√µes sobre c√≥digos IVA e tributa√ß√£o",
            "message": "qual o c√≥digo IVA para energia el√©trica?",
            "expected": True,
            "description_test": "Pergunta sobre IVA dentro do escopo"
        },
        {
            "agent": "Flow Agent",
            "scope": "Identifica√ß√£o de t√≥picos tribut√°rios, c√≥digos IVA, tipos de compra empresarial",
            "description": "Agente de fluxo que identifica t√≥picos espec√≠ficos de tributa√ß√£o e IVA",
            "message": "como fazer um bolo de chocolate?",
            "expected": False,
            "description_test": "Pergunta culin√°ria fora do escopo"
        },
        {
            "agent": "Knowledge Agent",
            "scope": "Documenta√ß√£o tribut√°ria, regulamenta√ß√µes fiscais, procedimentos, normas t√©cnicas",
            "description": "Agente de conhecimento que consulta documentos sobre tributa√ß√£o e IVA",
            "message": "qual a temperatura atual?",
            "expected": False,
            "description_test": "Pergunta meteorol√≥gica fora do escopo"
        },
        {
            "agent": "Interview Agent",
            "scope": "Coleta de informa√ß√µes sobre opera√ß√µes tribut√°rias, fornecedores, c√≥digos IVA",
            "description": "Agente de entrevista que coleta informa√ß√µes detalhadas sobre opera√ß√µes tribut√°rias",
            "message": "c√≥digo I0 para industrializa√ß√£o",
            "expected": True,
            "description_test": "Pergunta sobre c√≥digo IVA dentro do escopo"
        },
        {
            "agent": "Usage Agent",
            "scope": "Funcionalidades do sistema, orienta√ß√µes de uso, navega√ß√£o entre agentes",
            "description": "Agente de uso que explica como usar o sistema AtendentePro",
            "message": "como usar o sistema?",
            "expected": True,
            "description_test": "Pergunta sobre uso do sistema dentro do escopo"
        }
    ]
    
    print("\nüß™ EXECUTANDO CASOS DE TESTE:")
    print("-" * 60)
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. {case['description_test']}")
        print(f"   Agente: {case['agent']}")
        print(f"   Mensagem: '{case['message']}'")
        print(f"   Esperado: {'APROVADO' if case['expected'] else 'REJEITADO'}")
        
        try:
            # Executar avalia√ß√£o com IA
            result = evaluate_theme_with_ai(
                case['message'],
                case['agent'],
                case['scope'],
                case['description']
            )
            
            approved = result.get('approved', True)
            reason = result.get('reason', 'Sem raz√£o')
            confidence = result.get('confidence', 0.0)
            
            print(f"   ü§ñ IA Resultado: {'APROVADO' if approved else 'REJEITADO'}")
            print(f"   üìù Raz√£o: {reason}")
            print(f"   üéØ Confian√ßa: {confidence:.2f}")
            
            # Verificar se resultado est√° correto
            if approved == case['expected']:
                print(f"   ‚úÖ CORRETO - Resultado esperado")
            else:
                print(f"   ‚ùå INCORRETO - Esperado {case['expected']}, obtido {approved}")
                
        except Exception as e:
            print(f"   ‚ùå ERRO: {str(e)}")
        
        print("-" * 40)
    
    print("\nüìä RESUMO DO TESTE:")
    print("=" * 60)
    print("‚úÖ Fun√ß√£o de avalia√ß√£o com IA implementada")
    print("‚úÖ Integra√ß√£o com sistema de guardrails")
    print("‚úÖ An√°lise inteligente de contexto")
    print("‚úÖ Fallback para keywords em caso de erro")
    
    print("\nüîÑ VANTAGENS DA AVALIA√á√ÉO COM IA:")
    print("‚Ä¢ An√°lise contextual mais precisa")
    print("‚Ä¢ Compreens√£o de nuances e contexto")
    print("‚Ä¢ Adapta√ß√£o a diferentes tipos de pergunta")
    print("‚Ä¢ Menos falsos positivos/negativos")
    print("‚Ä¢ Explica√ß√µes detalhadas das decis√µes")
    
    print("\n‚ö†Ô∏è CONSIDERA√á√ïES:")
    print("‚Ä¢ Depend√™ncia de API externa")
    print("‚Ä¢ Lat√™ncia adicional")
    print("‚Ä¢ Custo por chamada")
    print("‚Ä¢ Fallback necess√°rio para robustez")

if __name__ == "__main__":
    test_ai_theme_evaluation()
