#!/usr/bin/env python3
"""
Teste Abrangente dos Guardrails - Cen√°rios Reais
Testa todos os tipos de valida√ß√£o: c√≥digos errados, c√≥digos inexistentes, temas aleat√≥rios
"""

import json
import re
import yaml
from unittest.mock import Mock
from pathlib import Path

# Simular a classe GuardrailConfig para teste
class TestGuardrailConfig:
    """Configura√ß√£o de teste para guardrails com t√≥picos"""
    
    def __init__(self):
        self.config = self._load_test_config()
    
    def _load_test_config(self):
        """Carrega configura√ß√£o de teste com t√≥picos"""
        return {
            "topics": {
                "compra_industrializacao": {
                    "description": "Compra para industrializa√ß√£o ‚Äî material manufaturado ou processo produtivo",
                    "codes": ["I0", "ID", "IE", "I8", "I5", "I9", "I2", "I7", "I1", "I3", "I4"]
                },
                "compra_comercializacao": {
                    "description": "Compra para comercializa√ß√£o ‚Äî produto para revenda sem altera√ß√£o",
                    "codes": ["R0", "ID", "R6", "R1", "R5", "R3", "R2", "R4"]
                },
                "aquisicao_energia_eletrica": {
                    "description": "Aquisi√ß√£o de energia el√©trica ‚Äî produtiva vs administrativa",
                    "codes": ["E1", "E2", "E3", "E4", "E0"]
                },
                "aquisicao_frete": {
                    "description": "Aquisi√ß√£o de frete ‚Äî servi√ßos de transporte",
                    "codes": ["F0", "F1", "F5", "FE", "FA", "F2", "FC", "F7", "F3", "FD", "FB", "F4"]
                }
            },
            "on_topic_keywords": [
                "iva", "c√≥digo", "c√≥digos", "tribut√°rio", "tributa√ß√£o", "imposto", "impostos",
                "fiscal", "fiscaliza√ß√£o", "nota fiscal", "nf", "nfe", "nfce", "icms", "ipi",
                "pis", "cofins", "simples nacional", "microempresa", "substitui√ß√£o tribut√°ria",
                "compra", "compras", "industrializa√ß√£o", "industrial", "produ√ß√£o", "manufaturado",
                "comercializa√ß√£o", "comercial", "revenda", "ativo operacional", "ativo projeto",
                "m√°quina", "equipamento", "cilindro", "consumo administrativo", "administrativo",
                "escrit√≥rio", "limpeza", "ti", "frete", "transporte", "log√≠stica",
                "energia el√©trica", "energia", "el√©trica", "eletricidade", "servi√ßo opera√ß√£o",
                "servi√ßo n√£o opera√ß√£o", "manuten√ß√£o", "assist√™ncia", "engenharia", "consultoria",
                "auditoria", "inspe√ß√£o", "fornecedor", "fornecedores", "cliente", "clientes",
                "empresa", "empresas", "cnpj", "cpf", "pessoa f√≠sica", "pessoa jur√≠dica",
                "processo", "procedimento", "documenta√ß√£o", "documento", "documentos",
                "an√°lise", "an√°lises", "consulta", "consultas", "orienta√ß√£o", "orienta√ß√µes",
                "suporte", "atendimento", "assist√™ncia", "ajuda", "white martins", "white",
                "martins", "g√°s", "gases", "oxig√™nio", "nitrog√™nio", "arg√¥nio", "hidrog√™nio",
                "h√©lio", "acetileno", "co2", "di√≥xido de carbono", "soldagem", "corte",
                "laborat√≥rio", "hospitalar", "aliment√≠cio", "bebida", "refrigera√ß√£o",
                "ar condicionado", "caldeira", "forno", "queima", "combust√£o"
            ],
            "sensitive_words": [
                "password", "senha", "token", "key", "secret",
                "hack", "exploit", "malware", "virus",
                "fraude", "sonega√ß√£o", "evas√£o", "ilegal"
            ]
        }
    
    def get_topics(self):
        return self.config.get("topics", {})
    
    def get_on_topic_keywords(self):
        return self.config.get("on_topic_keywords", [])
    
    def get_sensitive_words(self):
        return self.config.get("sensitive_words", [])

# Inst√¢ncia de teste
test_config = TestGuardrailConfig()

def reject_off_topic_queries(data):
    """Rejeita consultas fora do escopo usando nova l√≥gica on_topic_keywords"""
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return Mock(output_info="Argumentos JSON inv√°lidos")

    on_topic_keywords = test_config.get_on_topic_keywords()

    # Se n√£o h√° palavras-chave permitidas configuradas, n√£o validar
    if not on_topic_keywords:
        return Mock(output_info="Valida√ß√£o de t√≥picos n√£o configurada")

    # Verificar se a consulta cont√©m pelo menos uma palavra-chave permitida
    for key, value in args.items():
        value_str = str(value).lower()
        
        # Verificar se pelo menos uma palavra-chave permitida est√° presente
        topic_found = False
        for keyword in on_topic_keywords:
            if keyword.lower() in value_str:
                topic_found = True
                break
        
        # Se nenhuma palavra-chave permitida foi encontrada, rejeitar
        if not topic_found:
            return Mock(
                output_info=None,
                message=f"üö® Consulta fora do escopo: n√£o foi identificado nenhum t√≥pico relacionado aos servi√ßos da empresa"
            )

    return Mock(output_info="Consulta dentro do escopo")

def validate_topic_and_codes(data):
    """Valida t√≥picos e c√≥digos espec√≠ficos por t√≥pico"""
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return Mock(output_info="Argumentos JSON inv√°lidos")

    topics = test_config.get_topics()
    
    if not topics:
        return Mock(output_info="Valida√ß√£o de t√≥picos n√£o configurada")

    for key, value in args.items():
        value_str = str(value)  # Manter mai√∫sculas para o regex
        value_str_lower = value_str.lower()  # Min√∫sculas para contexto
        
        # Procurar por c√≥digos IVA no texto (padr√£o espec√≠fico para IVA)
        # Capturar c√≥digos como E1, I0, R1, F0, Z9, XX, ABC, etc.
        code_pattern = r'\b([A-Z]\d|[A-Z]{2,3}|\d{2,3})\b'
        matches = re.findall(code_pattern, value_str)
        
        # Filtrar palavras comuns que n√£o s√£o c√≥digos IVA
        common_words = {"QUAL", "PARA", "COM", "SEM", "DOS", "DAS", "DO", "DA", "DE", "EM", "NA", "NO", "IVA", "CODIGO"}
        matches = [match.upper() for match in matches if match.upper() not in common_words]
        
        # Debug: mostrar c√≥digos encontrados
        if matches:
            print(f"    DEBUG: C√≥digos encontrados: {matches}")
        
        if matches:
            for code in matches:
                code_found_in_topic = False
                topic_for_code = None
                
                # Encontrar em qual t√≥pico o c√≥digo est√°
                for topic_name, topic_data in topics.items():
                    if code in topic_data.get("codes", []):
                        code_found_in_topic = True
                        topic_for_code = topic_name
                        break
                
                if not code_found_in_topic:
                    return Mock(
                        output_info=None,
                        message=f"üö® C√≥digo IVA '{code}' n√£o encontrado em nenhum t√≥pico v√°lido"
                    )
                
                # Verificar contexto
                topic_keywords = {
                    "compra_industrializacao": ["industrializa√ß√£o", "industrial", "produ√ß√£o", "manufaturado"],
                    "compra_comercializacao": ["comercializa√ß√£o", "revenda", "comercial"],
                    "aquisicao_energia_eletrica": ["energia", "el√©trica", "eletricidade"],
                    "aquisicao_frete": ["frete", "transporte", "log√≠stica"]
                }
                
                context_matches = False
                if topic_for_code in topic_keywords:
                    for keyword in topic_keywords[topic_for_code]:
                        if keyword in value_str_lower:
                            context_matches = True
                            break
                
                if not context_matches:
                    topic_description = topics[topic_for_code].get("description", "")
                    return Mock(
                        output_info=None,
                        message=f"üö® C√≥digo IVA '{code}' n√£o corresponde ao contexto da pergunta. Este c√≥digo √© para: {topic_description}"
                    )

    return Mock(output_info="T√≥picos e c√≥digos validados")

def reject_sensitive_content(data):
    """Rejeita conte√∫do sens√≠vel"""
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return Mock(output_info="Argumentos JSON inv√°lidos")

    sensitive_words = test_config.get_sensitive_words()

    for key, value in args.items():
        value_str = str(value).lower()
        
        for word in sensitive_words:
            if word.lower() in value_str:
                return Mock(
                    output_info=None,
                    message=f"üö® Conte√∫do sens√≠vel detectado: '{word}'. Sua consulta foi bloqueada."
                )

    return Mock(output_info="Conte√∫do validado")

def test_code_wrong_for_topic():
    """Testa c√≥digos corretos mas para t√≥pico errado"""
    
    print("üß™ TESTE: C√≥digo Correto para T√≥pico Errado")
    print("=" * 60)
    
    test_cases = [
        {
            "query": "Qual o c√≥digo IVA E1 para industrializa√ß√£o?",
            "expected": "bloqueado",
            "reason": "E1 √© para energia el√©trica, n√£o industrializa√ß√£o"
        },
        {
            "query": "Qual o c√≥digo IVA I0 para frete?",
            "expected": "bloqueado", 
            "reason": "I0 √© para industrializa√ß√£o, n√£o frete"
        },
        {
            "query": "Qual o c√≥digo IVA R1 para energia el√©trica?",
            "expected": "bloqueado",
            "reason": "R1 √© para comercializa√ß√£o, n√£o energia"
        },
        {
            "query": "Qual o c√≥digo IVA F0 para comercializa√ß√£o?",
            "expected": "bloqueado",
            "reason": "F0 √© para frete, n√£o comercializa√ß√£o"
        }
    ]
    
    blocked_count = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n   Teste {i}: {case['query']}")
        print(f"   Esperado: {case['expected']}")
        print(f"   Motivo: {case['reason']}")
        
        # Simular dados
        args = f'{{"query": "{case["query"]}"}}'
        mock_data = Mock()
        mock_data.context = Mock()
        mock_data.context.tool_arguments = args
        
        # Testar guardrail
        result = validate_topic_and_codes(mock_data)
        
        if result.output_info is None:
            print(f"   ‚úÖ BLOQUEADO: {result.message}")
            blocked_count += 1
        else:
            print(f"   ‚ùå PERMITIDO: {result.output_info}")
    
    print(f"\nüìä Resultado: {blocked_count}/{len(test_cases)} casos bloqueados")
    return blocked_count == len(test_cases)

def test_nonexistent_codes():
    """Testa c√≥digos que n√£o existem"""
    
    print("\nüß™ TESTE: C√≥digos Inexistentes")
    print("=" * 60)
    
    test_cases = [
        {
            "query": "Qual o c√≥digo IVA Z9 para energia el√©trica?",
            "expected": "bloqueado",
            "reason": "Z9 n√£o existe"
        },
        {
            "query": "Qual o c√≥digo IVA XX para industrializa√ß√£o?",
            "expected": "bloqueado",
            "reason": "XX n√£o existe"
        },
        {
            "query": "Qual o c√≥digo IVA 99 para frete?",
            "expected": "bloqueado",
            "reason": "99 n√£o √© formato IVA v√°lido"
        },
        {
            "query": "Qual o c√≥digo IVA ABC para comercializa√ß√£o?",
            "expected": "bloqueado",
            "reason": "ABC n√£o existe"
        }
    ]
    
    blocked_count = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n   Teste {i}: {case['query']}")
        print(f"   Esperado: {case['expected']}")
        print(f"   Motivo: {case['reason']}")
        
        # Simular dados
        args = f'{{"query": "{case["query"]}"}}'
        mock_data = Mock()
        mock_data.context = Mock()
        mock_data.context.tool_arguments = args
        
        # Testar guardrail
        result = validate_topic_and_codes(mock_data)
        
        if result.output_info is None:
            print(f"   ‚úÖ BLOQUEADO: {result.message}")
            blocked_count += 1
        else:
            print(f"   ‚ùå PERMITIDO: {result.output_info}")
    
    print(f"\nüìä Resultado: {blocked_count}/{len(test_cases)} casos bloqueados")
    return blocked_count == len(test_cases)

def test_random_topics():
    """Testa temas aleat√≥rios fora do contexto"""
    
    print("\nüß™ TESTE: Temas Aleat√≥rios Fora do Contexto")
    print("=" * 60)
    
    test_cases = [
        {
            "query": "quem descobriu o brasil?",
            "expected": "bloqueado",
            "reason": "Hist√≥ria do Brasil n√£o √© relacionado a IVA"
        },
        {
            "query": "qual a temperatura atual?",
            "expected": "bloqueado",
            "reason": "Clima n√£o √© relacionado a IVA"
        },
        {
            "query": "como est√° a pol√≠tica hoje?",
            "expected": "bloqueado",
            "reason": "Pol√≠tica n√£o √© relacionado a IVA"
        },
        {
            "query": "qual o melhor filme de 2024?",
            "expected": "bloqueado",
            "reason": "Entretenimento n√£o √© relacionado a IVA"
        },
        {
            "query": "como fazer uma receita de bolo?",
            "expected": "bloqueado",
            "reason": "Culin√°ria n√£o √© relacionado a IVA"
        },
        {
            "query": "quem ganhou o jogo de futebol?",
            "expected": "bloqueado",
            "reason": "Esporte n√£o √© relacionado a IVA"
        },
        {
            "query": "qual a melhor criptomoeda para investir?",
            "expected": "bloqueado",
            "reason": "Investimentos n√£o s√£o relacionados a IVA"
        },
        {
            "query": "qual a melhor igreja para frequentar?",
            "expected": "bloqueado",
            "reason": "Religi√£o n√£o √© relacionado a IVA"
        }
    ]
    
    blocked_count = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n   Teste {i}: {case['query']}")
        print(f"   Esperado: {case['expected']}")
        print(f"   Motivo: {case['reason']}")
        
        # Simular dados
        args = f'{{"query": "{case["query"]}"}}'
        mock_data = Mock()
        mock_data.context = Mock()
        mock_data.context.tool_arguments = args
        
        # Testar guardrail
        result = reject_off_topic_queries(mock_data)
        
        if result.output_info is None:
            print(f"   ‚úÖ BLOQUEADO: {result.message}")
            blocked_count += 1
        else:
            print(f"   ‚ùå PERMITIDO: {result.output_info}")
    
    print(f"\nüìä Resultado: {blocked_count}/{len(test_cases)} casos bloqueados")
    return blocked_count == len(test_cases)

def test_sensitive_content():
    """Testa conte√∫do sens√≠vel"""
    
    print("\nüß™ TESTE: Conte√∫do Sens√≠vel")
    print("=" * 60)
    
    test_cases = [
        {
            "query": "como fazer fraude de IVA?",
            "expected": "bloqueado",
            "reason": "Palavra 'fraude' √© sens√≠vel"
        },
        {
            "query": "qual a senha do sistema?",
            "expected": "bloqueado",
            "reason": "Palavra 'senha' √© sens√≠vel"
        },
        {
            "query": "como hackear o sistema?",
            "expected": "bloqueado",
            "reason": "Palavra 'hackear' √© sens√≠vel"
        },
        {
            "query": "como fazer sonega√ß√£o de impostos?",
            "expected": "bloqueado",
            "reason": "Palavra 'sonega√ß√£o' √© sens√≠vel"
        }
    ]
    
    blocked_count = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n   Teste {i}: {case['query']}")
        print(f"   Esperado: {case['expected']}")
        print(f"   Motivo: {case['reason']}")
        
        # Simular dados
        args = f'{{"query": "{case["query"]}"}}'
        mock_data = Mock()
        mock_data.context = Mock()
        mock_data.context.tool_arguments = args
        
        # Testar guardrail
        result = reject_sensitive_content(mock_data)
        
        if result.output_info is None:
            print(f"   ‚úÖ BLOQUEADO: {result.message}")
            blocked_count += 1
        else:
            print(f"   ‚ùå PERMITIDO: {result.output_info}")
    
    print(f"\nüìä Resultado: {blocked_count}/{len(test_cases)} casos bloqueados")
    return blocked_count == len(test_cases)

def test_valid_queries():
    """Testa consultas v√°lidas que devem ser permitidas"""
    
    print("\nüß™ TESTE: Consultas V√°lidas")
    print("=" * 60)
    
    test_cases = [
        {
            "query": "Qual o c√≥digo IVA E1 para energia el√©trica?",
            "expected": "permitido",
            "reason": "C√≥digo e contexto corretos"
        },
        {
            "query": "Qual o c√≥digo IVA I0 para industrializa√ß√£o?",
            "expected": "permitido",
            "reason": "C√≥digo e contexto corretos"
        },
        {
            "query": "Como funciona o IVA para comercializa√ß√£o?",
            "expected": "permitido",
            "reason": "Pergunta sobre IVA v√°lida"
        },
        {
            "query": "Qual a diferen√ßa entre c√≥digos de frete?",
            "expected": "permitido",
            "reason": "Pergunta sobre frete v√°lida"
        }
    ]
    
    allowed_count = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n   Teste {i}: {case['query']}")
        print(f"   Esperado: {case['expected']}")
        print(f"   Motivo: {case['reason']}")
        
        # Simular dados
        args = f'{{"query": "{case["query"]}"}}'
        mock_data = Mock()
        mock_data.context = Mock()
        mock_data.context.tool_arguments = args
        
        # Testar guardrail de t√≥picos (se aplic√°vel)
        if any(code in case["query"] for code in ["E1", "I0", "R1", "F0"]):
            result = validate_topic_and_codes(mock_data)
        else:
            result = reject_off_topic_queries(mock_data)
        
        if result.output_info is not None:
            print(f"   ‚úÖ PERMITIDO: {result.output_info}")
            allowed_count += 1
        else:
            print(f"   ‚ùå BLOQUEADO: {result.message}")
    
    print(f"\nüìä Resultado: {allowed_count}/{len(test_cases)} casos permitidos")
    return allowed_count == len(test_cases)

def test_edge_cases():
    """Testa casos extremos e combina√ß√µes"""
    
    print("\nüß™ TESTE: Casos Extremos")
    print("=" * 60)
    
    test_cases = [
        {
            "query": "Qual o c√≥digo IVA E1 para energia el√©trica e tamb√©m quero saber sobre pol√≠tica?",
            "expected": "bloqueado",
            "reason": "Mistura c√≥digo v√°lido com tema fora do escopo"
        },
        {
            "query": "Como fazer fraude de IVA usando c√≥digo E1?",
            "expected": "bloqueado",
            "reason": "Mistura c√≥digo v√°lido com conte√∫do sens√≠vel"
        },
        {
            "query": "Qual o c√≥digo IVA Z9 para quem descobriu o brasil?",
            "expected": "bloqueado",
            "reason": "C√≥digo inexistente + tema fora do escopo"
        },
        {
            "query": "Qual a temperatura atual usando c√≥digo E1?",
            "expected": "bloqueado",
            "reason": "C√≥digo v√°lido + tema fora do escopo"
        }
    ]
    
    blocked_count = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n   Teste {i}: {case['query']}")
        print(f"   Esperado: {case['expected']}")
        print(f"   Motivo: {case['reason']}")
        
        # Simular dados
        args = f'{{"query": "{case["query"]}"}}'
        mock_data = Mock()
        mock_data.context = Mock()
        mock_data.context.tool_arguments = args
        
        # Testar m√∫ltiplos guardrails
        results = []
        
        # Testar conte√∫do sens√≠vel
        result1 = reject_sensitive_content(mock_data)
        if result1.output_info is None:
            results.append("sens√≠vel")
        
        # Testar t√≥picos fora do escopo
        result2 = reject_off_topic_queries(mock_data)
        if result2.output_info is None:
            results.append("fora_escopo")
        
        # Testar valida√ß√£o de c√≥digos
        result3 = validate_topic_and_codes(mock_data)
        if result3.output_info is None:
            results.append("codigo_invalido")
        
        if results:
            print(f"   ‚úÖ BLOQUEADO: {', '.join(results)}")
            blocked_count += 1
        else:
            print(f"   ‚ùå PERMITIDO: todos os guardrails passaram")
    
    print(f"\nüìä Resultado: {blocked_count}/{len(test_cases)} casos bloqueados")
    return blocked_count == len(test_cases)

if __name__ == "__main__":
    print("üõ°Ô∏è TESTE ABRANGENTE DOS GUARDRAILS - CEN√ÅRIOS REAIS")
    print("=" * 80)
    
    # Executar todos os testes
    test1 = test_code_wrong_for_topic()
    test2 = test_nonexistent_codes()
    test3 = test_random_topics()
    test4 = test_sensitive_content()
    test5 = test_valid_queries()
    test6 = test_edge_cases()
    
    print("\n" + "=" * 80)
    print("üìã RESUMO FINAL DOS TESTES")
    print("=" * 80)
    print(f"‚úÖ C√≥digos corretos para t√≥pico errado bloqueados: {'SIM' if test1 else 'N√ÉO'}")
    print(f"‚úÖ C√≥digos inexistentes bloqueados: {'SIM' if test2 else 'N√ÉO'}")
    print(f"‚úÖ Temas aleat√≥rios bloqueados: {'SIM' if test3 else 'N√ÉO'}")
    print(f"‚úÖ Conte√∫do sens√≠vel bloqueado: {'SIM' if test4 else 'N√ÉO'}")
    print(f"‚úÖ Consultas v√°lidas permitidas: {'SIM' if test5 else 'N√ÉO'}")
    print(f"‚úÖ Casos extremos bloqueados: {'SIM' if test6 else 'N√ÉO'}")
    
    total_tests = 6
    passed_tests = sum([test1, test2, test3, test4, test5, test6])
    
    if passed_tests == total_tests:
        print(f"\nüéâ TODOS OS TESTES PASSARAM! ({passed_tests}/{total_tests})")
        print("üõ°Ô∏è Sistema de guardrails funcionando perfeitamente")
        print("üìÅ Valida√ß√£o robusta implementada")
        print("üéØ Todos os cen√°rios de seguran√ßa cobertos")
    else:
        print(f"\n‚ùå ALGUNS TESTES FALHARAM ({passed_tests}/{total_tests})")
        print("üîß Sistema de guardrails precisa de ajustes")
    
    print("=" * 80)
