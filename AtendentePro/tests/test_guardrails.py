"""
Teste do sistema de guardrails
"""

import asyncio
import sys
import os

# Adiciona o diret√≥rio pai ao path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from guardrails import GuardrailSystem


async def test_guardrails():
    """Testa o sistema de guardrails"""
    print("üß™ Testando Sistema de Guardrails...")
    
    # Testa com configura√ß√£o gen√©rica
    print("\n1Ô∏è‚É£ Testando com configura√ß√£o gen√©rica:")
    generic_system = GuardrailSystem()
    
    # Testa com configura√ß√£o espec√≠fica da White Martins
    print("\n2Ô∏è‚É£ Testando com configura√ß√£o White Martins:")
    white_martins_config = "Template/White_Martins/guardrails_config.yaml"
    wm_system = GuardrailSystem(white_martins_config)
    
    # Mensagens de teste
    test_cases = [
        {
            "message": "Preciso de uma v√°lvula pneum√°tica para minha aplica√ß√£o",
            "agent": "triage_agent",
            "expected": True,
            "description": "Mensagem relevante para White Martins"
        },
        {
            "message": "Como resolver 2x + 5 = 11?",
            "agent": "triage_agent", 
            "expected": False,
            "description": "Matem√°tica - fora do escopo"
        },
        {
            "message": "Quero informa√ß√µes sobre compressores",
            "agent": "answer_agent",
            "expected": True,
            "description": "Consulta sobre produto White Martins"
        },
        {
            "message": "Me ajude com programa√ß√£o Python",
            "agent": "knowledge_agent",
            "expected": False,
            "description": "Programa√ß√£o - fora do escopo"
        },
        {
            "message": "Qual √© a especifica√ß√£o t√©cnica do cilindro pneum√°tico?",
            "agent": "answer_agent",
            "expected": True,
            "description": "Consulta t√©cnica relevante"
        }
    ]
    
    print(f"\nüìã Executando {len(test_cases)} testes...")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n--- Teste {i}: {test_case['description']} ---")
        print(f"Mensagem: {test_case['message']}")
        print(f"Agente: {test_case['agent']}")
        
        try:
            result = await wm_system.evaluate_message(
                test_case['message'], 
                test_case['agent']
            )
            
            print(f"‚úÖ Resultado:")
            print(f"   Escopo: {result.is_in_scope}")
            print(f"   Confian√ßa: {result.confidence:.2f}")
            print(f"   A√ß√£o: {result.suggested_action}")
            print(f"   Raz√£o: {result.reasoning}")
            
            # Verifica se o resultado est√° conforme esperado
            if result.is_in_scope == test_case['expected']:
                print(f"‚úÖ Teste PASSOU - Resultado conforme esperado")
            else:
                print(f"‚ùå Teste FALHOU - Esperado: {test_case['expected']}, Obtido: {result.is_in_scope}")
                
        except Exception as e:
            print(f"‚ùå Erro no teste: {str(e)}")
    
    print(f"\nüéØ Teste conclu√≠do!")


async def test_configuration_loading():
    """Testa carregamento de configura√ß√µes"""
    print("\nüîß Testando carregamento de configura√ß√µes...")
    
    try:
        # Testa configura√ß√£o gen√©rica
        generic_system = GuardrailSystem()
        print("‚úÖ Configura√ß√£o gen√©rica carregada")
        
        # Testa configura√ß√£o espec√≠fica
        wm_system = GuardrailSystem("Template/White_Martins/guardrails_config.yaml")
        print("‚úÖ Configura√ß√£o White Martins carregada")
        
        # Verifica se tem configura√ß√µes para diferentes agentes
        agents = ["triage_agent", "flow_agent", "interview_agent", "answer_agent"]
        for agent in agents:
            config = wm_system.config.get_agent_config(agent)
            if config:
                print(f"‚úÖ Configura√ß√£o encontrada para {agent}")
            else:
                print(f"‚ùå Configura√ß√£o n√£o encontrada para {agent}")
                
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes: {str(e)}")


if __name__ == "__main__":
    print("üöÄ Iniciando testes do sistema de guardrails...")
    
    # Executa testes
    asyncio.run(test_configuration_loading())
    asyncio.run(test_guardrails())
    
    print("\n‚ú® Todos os testes conclu√≠dos!")

