#!/usr/bin/env python3
"""
Teste da estrutura da avalia√ß√£o de tema baseada em IA (sem API)
"""

import sys
from pathlib import Path
import yaml

# Adicionar o diret√≥rio pai ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

def test_ai_structure():
    """Testa a estrutura da nova avalia√ß√£o de tema usando IA"""
    
    print("ü§ñ TESTE DA ESTRUTURA DE AVALIA√á√ÉO COM IA")
    print("=" * 60)
    
    # Verificar se as configura√ß√µes foram atualizadas
    config_path = Path(__file__).parent.parent / "Template" / "White_Martins" / "agent_guardrails_config.yaml"
    
    if not config_path.exists():
        print("‚ùå Arquivo de configura√ß√£o n√£o encontrado!")
        return
    
    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    print("üìã CONFIGURA√á√ÉO DE GUARDRAILS ATUALIZADA:")
    print("-" * 60)
    
    for agent_name, guardrails in config.items():
        if isinstance(guardrails, list):
            print(f"\nü§ñ {agent_name}:")
            for guardrail in guardrails:
                if "validate_agent_scope_with_ai" in guardrail:
                    print(f"   ‚úÖ {guardrail} (NOVA FUN√á√ÉO COM IA)")
                else:
                    print(f"   ‚Ä¢ {guardrail}")
    
    # Verificar se as descri√ß√µes de escopo existem
    scope_config_path = Path(__file__).parent.parent / "Template" / "White_Martins" / "guardrails_config.yaml"
    
    if not scope_config_path.exists():
        print("‚ùå Arquivo de descri√ß√µes de escopo n√£o encontrado!")
        return
    
    with open(scope_config_path, 'r', encoding='utf-8') as f:
        scope_config = yaml.safe_load(f)
    
    descriptions = scope_config.get("agent_scope_descriptions", {})
    
    print(f"\nüìù DESCRI√á√ïES DE ESCOPO CARREGADAS: {len(descriptions)} agentes")
    print("-" * 60)
    
    for agent_name, agent_data in descriptions.items():
        scope = agent_data.get("scope", "")
        description = agent_data.get("description", "")
        
        print(f"\nü§ñ {agent_name}")
        print(f"   Escopo: {scope}")
        print(f"   Descri√ß√£o: {description[:80]}...")
    
    # Simular casos de teste
    print("\nüß™ SIMULA√á√ÉO DE CASOS DE TESTE:")
    print("-" * 60)
    
    test_cases = [
        {
            "message": "quem descobriu o brasil?",
            "agent": "Triage Agent",
            "expected": "REJEITADO",
            "reason": "Hist√≥ria fora do escopo empresarial"
        },
        {
            "message": "qual o c√≥digo IVA para energia el√©trica?",
            "agent": "Answer Agent", 
            "expected": "APROVADO",
            "reason": "IVA dentro do escopo empresarial"
        },
        {
            "message": "como fazer um bolo de chocolate?",
            "agent": "Flow Agent",
            "expected": "REJEITADO",
            "reason": "Culin√°ria fora do escopo empresarial"
        },
        {
            "message": "qual a temperatura atual?",
            "agent": "Knowledge Agent",
            "expected": "REJEITADO",
            "reason": "Meteorologia fora do escopo empresarial"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. {case['reason']}")
        print(f"   Agente: {case['agent']}")
        print(f"   Mensagem: '{case['message']}'")
        print(f"   Esperado: {case['expected']}")
        
        # Simular avalia√ß√£o (sem IA real)
        agent_scope = descriptions.get(case['agent'], {}).get('scope', '')
        print(f"   Escopo do agente: {agent_scope}")
        print(f"   ü§ñ IA avaliaria: {case['expected']} (simulado)")
        print(f"   üìù Raz√£o: An√°lise contextual inteligente")
        print(f"   üéØ Confian√ßa: 0.85")
    
    print("\nüìä RESUMO DA IMPLEMENTA√á√ÉO:")
    print("=" * 60)
    print("‚úÖ Nova fun√ß√£o validate_agent_scope_with_ai criada")
    print("‚úÖ Integra√ß√£o com OpenAI GPT-4o-mini")
    print("‚úÖ Prompt especializado para an√°lise de escopo")
    print("‚úÖ Fallback para keywords em caso de erro")
    print("‚úÖ Configura√ß√µes atualizadas para usar IA")
    print("‚úÖ Descri√ß√µes de escopo por agente")
    
    print("\nüöÄ FUNCIONALIDADES DA IA:")
    print("‚Ä¢ An√°lise contextual inteligente")
    print("‚Ä¢ Compreens√£o de nuances")
    print("‚Ä¢ Explica√ß√µes detalhadas")
    print("‚Ä¢ Confian√ßa quantificada")
    print("‚Ä¢ Sugest√µes de escopo correto")
    
    print("\nüîÑ FLUXO DE AVALIA√á√ÉO:")
    print("1. Mensagem do usu√°rio ‚Üí IA")
    print("2. IA analisa contexto e escopo do agente")
    print("3. IA retorna: approved, reason, confidence")
    print("4. Se rejeitado: mensagem de erro espec√≠fica")
    print("5. Se aprovado: continua processamento")
    print("6. Em caso de erro: fallback para keywords")
    
    print("\n‚úÖ Sistema de avalia√ß√£o com IA implementado!")

if __name__ == "__main__":
    test_ai_structure()
