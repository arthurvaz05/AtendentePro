#!/usr/bin/env python3
"""
Teste simples das mensagens educativas dos guardrails
Verifica se as mensagens est√£o sendo formatadas corretamente
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio pai ao path
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.insert(0, str(parent_dir))

# Importar m√≥dulos
from guardrails import get_agent_on_topic_keywords

def test_message_formatting():
    """Testa se as mensagens est√£o sendo formatadas corretamente"""
    
    print("üß™ TESTE: Formata√ß√£o das Mensagens Educativas")
    print("=" * 60)
    
    # Simular diferentes cen√°rios de mensagens
    test_scenarios = [
        {
            "scenario": "T√≥pico fora do escopo",
            "agent": "Triage Agent",
            "query": "quem descobriu o brasil?",
            "expected_message": "Desculpe, mas n√£o posso responder sobre esse tema"
        },
        {
            "scenario": "Conte√∫do sens√≠vel",
            "agent": "Answer Agent", 
            "query": "como fazer fraude de IVA?",
            "expected_message": "Desculpe, mas n√£o posso processar sua solicita√ß√£o pois cont√©m conte√∫do sens√≠vel"
        },
        {
            "scenario": "C√≥digo inv√°lido",
            "agent": "Answer Agent",
            "query": "qual o c√≥digo IVA Z9?",
            "expected_message": "Desculpe, mas o c√≥digo 'Z9' n√£o √© um c√≥digo IVA v√°lido"
        },
        {
            "scenario": "Mensagem muito curta",
            "agent": "Triage Agent",
            "query": "aa",
            "expected_message": "Desculpe, mas sua mensagem √© muito curta"
        }
    ]
    
    success_count = 0
    
    for scenario in test_scenarios:
        print(f"\nüìã Cen√°rio: {scenario['scenario']}")
        print(f"   Agente: {scenario['agent']}")
        print(f"   Query: '{scenario['query']}'")
        print("-" * 40)
        
        # Simular mensagem educativa
        if scenario["scenario"] == "T√≥pico fora do escopo":
            # Obter temas do agente
            topics = get_agent_on_topic_keywords(scenario["agent"])
            if topics:
                sample_topics = ", ".join(topics[:5])
                message = f"Desculpe, mas n√£o posso responder sobre esse tema. Meu foco √© ajudar com quest√µes relacionadas aos servi√ßos da empresa, como: {sample_topics}. Por favor, reformule sua pergunta sobre um desses t√≥picos."
                print(f"   ‚úÖ Mensagem simulada: {message}")
                
                # Verificar se cont√©m elementos educativos
                educational_elements = [
                    "Desculpe",
                    "n√£o posso responder",
                    "reformule sua pergunta",
                    sample_topics.split(", ")[0]  # Primeiro tema como exemplo
                ]
                
                contains_elements = all(
                    element.lower() in message.lower() 
                    for element in educational_elements
                )
                
                if contains_elements:
                    print(f"   ‚úÖ Cont√©m elementos educativos")
                    success_count += 1
                else:
                    print(f"   ‚ùå N√£o cont√©m elementos educativos")
            else:
                print(f"   ‚ùå Nenhum tema encontrado para o agente")
        
        elif scenario["scenario"] == "Conte√∫do sens√≠vel":
            message = f"Desculpe, mas n√£o posso processar sua solicita√ß√£o pois cont√©m conte√∫do sens√≠vel relacionado a 'fraude'. Por favor, reformule sua pergunta de forma mais adequada."
            print(f"   ‚úÖ Mensagem simulada: {message}")
            
            educational_elements = ["Desculpe", "conte√∫do sens√≠vel", "reformule"]
            contains_elements = all(
                element.lower() in message.lower() 
                for element in educational_elements
            )
            
            if contains_elements:
                print(f"   ‚úÖ Cont√©m elementos educativos")
                success_count += 1
            else:
                print(f"   ‚ùå N√£o cont√©m elementos educativos")
        
        elif scenario["scenario"] == "C√≥digo inv√°lido":
            message = f"Desculpe, mas o c√≥digo 'Z9' n√£o √© um c√≥digo IVA v√°lido. Por favor, verifique o c√≥digo e tente novamente. Se precisar de ajuda com c√≥digos v√°lidos, posso orient√°-lo sobre os c√≥digos dispon√≠veis."
            print(f"   ‚úÖ Mensagem simulada: {message}")
            
            educational_elements = ["Desculpe", "c√≥digo", "n√£o √© um c√≥digo", "verifique"]
            contains_elements = all(
                element.lower() in message.lower() 
                for element in educational_elements
            )
            
            if contains_elements:
                print(f"   ‚úÖ Cont√©m elementos educativos")
                success_count += 1
            else:
                print(f"   ‚ùå N√£o cont√©m elementos educativos")
                # Debug: mostrar quais elementos est√£o faltando
                missing = [elem for elem in educational_elements if elem.lower() not in message.lower()]
                print(f"   üîç Elementos faltando: {missing}")
        
        elif scenario["scenario"] == "Mensagem muito curta":
            message = f"Desculpe, mas sua mensagem √© muito curta. Por favor, forne√ßa mais detalhes (m√≠nimo 3 caracteres) para que eu possa ajud√°-lo melhor."
            print(f"   ‚úÖ Mensagem simulada: {message}")
            
            educational_elements = ["Desculpe", "muito curta", "mais detalhes"]
            contains_elements = all(
                element.lower() in message.lower() 
                for element in educational_elements
            )
            
            if contains_elements:
                print(f"   ‚úÖ Cont√©m elementos educativos")
                success_count += 1
            else:
                print(f"   ‚ùå N√£o cont√©m elementos educativos")
    
    print(f"\nüìä Resultado: {success_count}/{len(test_scenarios)} cen√°rios com mensagens educativas")
    return success_count == len(test_scenarios)

def test_agent_specific_topics():
    """Testa se cada agente tem temas espec√≠ficos para mensagens personalizadas"""
    
    print("\nüß™ TESTE: Temas Espec√≠ficos para Mensagens")
    print("=" * 60)
    
    agents_to_test = [
        "Triage Agent",
        "Flow Agent",
        "Confirmation Agent", 
        "Knowledge Agent",
        "Usage Agent"
    ]
    
    success_count = 0
    
    for agent_name in agents_to_test:
        print(f"\nüìã {agent_name}")
        print("-" * 40)
        
        # Obter temas espec√≠ficos do agente
        topics = get_agent_on_topic_keywords(agent_name)
        
        if topics:
            print(f"   ‚úÖ Temas encontrados: {len(topics)}")
            
            # Simular mensagem espec√≠fica do agente
            sample_topics = ", ".join(topics[:3])
            agent_friendly = agent_name.replace(" Agent", "").lower()
            
            message = f"Desculpe, mas o {agent_friendly} n√£o pode responder sobre esse tema. Meu foco √© ajudar com quest√µes relacionadas a: {sample_topics}. Por favor, reformule sua pergunta sobre um desses t√≥picos."
            
            print(f"   üìù Mensagem espec√≠fica: {message}")
            
            # Verificar se a mensagem √© espec√≠fica do agente
            if agent_friendly in message and sample_topics.split(", ")[0] in message:
                print(f"   ‚úÖ Mensagem espec√≠fica do agente")
                success_count += 1
            else:
                print(f"   ‚ùå Mensagem n√£o √© espec√≠fica do agente")
        else:
            print(f"   ‚ùå Nenhum tema encontrado")
    
    print(f"\nüìä Resultado: {success_count}/{len(agents_to_test)} agentes com mensagens espec√≠ficas")
    return success_count == len(agents_to_test)

if __name__ == "__main__":
    print("üõ°Ô∏è TESTE DAS MENSAGENS EDUCATIVEAS DOS GUARDRAILS")
    print("=" * 80)
    
    test1_success = test_message_formatting()
    test2_success = test_agent_specific_topics()
    
    print("\n" + "=" * 80)
    print("üìã RESUMO DO TESTE")
    print("=" * 80)
    
    if test1_success and test2_success:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Mensagens educativas est√£o bem formatadas")
        print("‚úÖ Mensagens s√£o espec√≠ficas por agente")
        print("‚úÖ Usu√°rio recebe orienta√ß√µes claras e amig√°veis")
        print("‚úÖ N√£o h√° exce√ß√µes, apenas mensagens educativas")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("üîß Verificar implementa√ß√£o das mensagens educativas")
    
    print("=" * 80)
