#!/usr/bin/env python3
"""
Teste da nova funcionalidade de guardrails espec√≠ficos por agente
Testa se cada agente tem seus pr√≥prios temas permitidos baseados nos prompts
"""

import sys
import os
from pathlib import Path
from unittest.mock import Mock

# Adicionar o diret√≥rio pai ao path
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.insert(0, str(parent_dir))

# Importar m√≥dulos
from guardrails import (
    get_agent_on_topic_keywords,
    reject_off_topic_queries_factory,
    get_guardrails_for_agent
)

def test_agent_specific_topics():
    """Testa se cada agente tem seus temas espec√≠ficos"""
    
    print("üß™ TESTE: Temas Espec√≠ficos por Agente")
    print("=" * 60)
    
    agents_to_test = [
        "Triage Agent",
        "Flow Agent", 
        "Interview Agent",
        "Answer Agent",
        "Confirmation Agent",
        "Knowledge Agent",
        "Usage Agent"
    ]
    
    for agent_name in agents_to_test:
        print(f"\nüìã {agent_name}")
        print("-" * 40)
        
        # Obter temas espec√≠ficos do agente
        topics = get_agent_on_topic_keywords(agent_name)
        
        if topics:
            print(f"‚úÖ Temas encontrados: {len(topics)}")
            print(f"üìù Primeiros 10 temas: {topics[:10]}")
            
            # Verificar temas espec√≠ficos por agente
            if agent_name == "Confirmation Agent":
                confirmation_keywords = ["confirmar", "valida√ß√£o", "confer√™ncia"]
                found_confirmation = any(kw in topics for kw in confirmation_keywords)
                print(f"‚úÖ Temas de confirma√ß√£o encontrados: {found_confirmation}")
            
            elif agent_name == "Knowledge Agent":
                knowledge_keywords = ["procedimento", "documenta√ß√£o", "norma"]
                found_knowledge = any(kw in topics for kw in knowledge_keywords)
                print(f"‚úÖ Temas de conhecimento encontrados: {found_knowledge}")
            
            elif agent_name == "Usage Agent":
                usage_keywords = ["usar o sistema", "como funciona", "ajuda plataforma"]
                found_usage = any(kw in topics for kw in usage_keywords)
                print(f"‚úÖ Temas de uso encontrados: {found_usage}")
            
            elif agent_name == "Flow Agent":
                flow_keywords = ["duvida iva", "qual iva"]
                found_flow = any(kw in topics for kw in flow_keywords)
                print(f"‚úÖ Temas espec√≠ficos do Flow encontrados: {found_flow}")
        else:
            print("‚ùå Nenhum tema configurado para este agente")

def get_agent_test_cases(agent_name):
    """Retorna casos de teste espec√≠ficos para cada agente"""
    
    base_cases = [
        {
            "query": "quem descobriu o brasil?",
            "expected": "bloqueado",
            "reason": "Tema fora do escopo"
        }
    ]
    
    if agent_name == "Triage Agent":
        return base_cases + [
            {
                "query": "Qual o c√≥digo IVA para energia el√©trica?",
                "expected": "permitido",
                "reason": "Tema relacionado a IVA"
            },
            {
                "query": "Como usar o sistema?",
                "expected": "permitido", 
                "reason": "Tema relacionado a uso do sistema"
            }
        ]
    
    elif agent_name == "Flow Agent":
        return base_cases + [
            {
                "query": "Qual o c√≥digo IVA para industrializa√ß√£o?",
                "expected": "permitido",
                "reason": "Tema espec√≠fico de IVA"
            },
            {
                "query": "D√∫vida sobre IVA",
                "expected": "permitido",
                "reason": "Palavra-chave espec√≠fica do Flow"
            }
        ]
    
    elif agent_name == "Confirmation Agent":
        return base_cases + [
            {
                "query": "Confirmar c√≥digo F0",
                "expected": "permitido",
                "reason": "Tema de confirma√ß√£o"
            },
            {
                "query": "Valida√ß√£o de c√≥digo IVA",
                "expected": "permitido",
                "reason": "Tema de valida√ß√£o"
            }
        ]
    
    elif agent_name == "Knowledge Agent":
        return base_cases + [
            {
                "query": "Qual o procedimento para carta de corre√ß√£o?",
                "expected": "permitido",
                "reason": "Tema de procedimento"
            },
            {
                "query": "Documenta√ß√£o sobre NF-e",
                "expected": "permitido",
                "reason": "Tema de documenta√ß√£o"
            }
        ]
    
    elif agent_name == "Usage Agent":
        return base_cases + [
            {
                "query": "Como usar o sistema?",
                "expected": "permitido",
                "reason": "Tema de uso do sistema"
            },
            {
                "query": "Ajuda com a plataforma",
                "expected": "permitido",
                "reason": "Tema de ajuda"
            }
        ]
    
    else:  # Interview Agent, Answer Agent
        return base_cases + [
            {
                "query": "Qual o c√≥digo IVA para energia el√©trica?",
                "expected": "permitido",
                "reason": "Tema relacionado a IVA"
            }
        ]

def test_guardrail_factory():
    """Testa se o factory de guardrails est√° funcionando"""
    
    print("\nüß™ TESTE: Factory de Guardrails")
    print("=" * 60)
    
    agents_to_test = ["Triage Agent", "Flow Agent", "Confirmation Agent"]
    
    for agent_name in agents_to_test:
        print(f"\nüìã {agent_name}")
        print("-" * 40)
        
        # Obter guardrails para o agente
        guardrails = get_guardrails_for_agent(agent_name)
        
        print(f"‚úÖ Guardrails encontrados: {len(guardrails)}")
        for i, guardrail in enumerate(guardrails):
            guardrail_name = getattr(guardrail, '__name__', str(type(guardrail).__name__))
            print(f"   {i+1}. {guardrail_name}")
        
        # Verificar se h√° guardrail espec√≠fico de t√≥picos
        has_topic_guardrail = any(
            hasattr(g, '__name__') and 'reject_off_topic_queries' in g.__name__
            for g in guardrails
        )
        
        if has_topic_guardrail:
            print("‚úÖ Guardrail de t√≥picos espec√≠fico encontrado")
        else:
            print("‚ùå Guardrail de t√≥picos espec√≠fico n√£o encontrado")

if __name__ == "__main__":
    print("üõ°Ô∏è TESTE DOS GUARDRAILS ESPEC√çFICOS POR AGENTE")
    print("=" * 80)
    
    test_agent_specific_topics()
    test_guardrail_factory()
    
    print("\n" + "=" * 80)
    print("üìã RESUMO DO TESTE")
    print("=" * 80)
    print("‚úÖ Cada agente deve ter seus pr√≥prios temas permitidos")
    print("‚úÖ Guardrails espec√≠ficos devem ser criados por factory")
    print("‚úÖ Temas devem ser baseados nos prompts de cada agente")
    print("=" * 80)
