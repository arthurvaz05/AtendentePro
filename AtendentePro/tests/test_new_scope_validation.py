#!/usr/bin/env python3
"""
Teste da nova l√≥gica de valida√ß√£o de escopo baseada em descri√ß√µes de agente
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio pai ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

from AtendentePro.guardrails import validate_agent_scope, guardrail_config
from agents import ToolInputGuardrailData, Context

def test_agent_scope_validation():
    """Testa a nova fun√ß√£o de valida√ß√£o de escopo"""
    
    print("üß™ TESTE DA NOVA L√ìGICA DE VALIDA√á√ÉO DE ESCOPO")
    print("=" * 60)
    
    # Casos de teste
    test_cases = [
        {
            "agent": "Triage Agent",
            "message": "quem descobriu o brasil?",
            "expected": "Bloqueado - fora do escopo",
            "description": "Pergunta hist√≥rica fora do escopo empresarial"
        },
        {
            "agent": "Answer Agent", 
            "message": "qual o c√≥digo IVA para energia el√©trica?",
            "expected": "Permitido - dentro do escopo",
            "description": "Pergunta sobre IVA dentro do escopo"
        },
        {
            "agent": "Flow Agent",
            "message": "como fazer um bolo de chocolate?",
            "expected": "Bloqueado - fora do escopo",
            "description": "Pergunta culin√°ria fora do escopo"
        },
        {
            "agent": "Knowledge Agent",
            "message": "qual a temperatura atual?",
            "expected": "Bloqueado - fora do escopo", 
            "description": "Pergunta meteorol√≥gica fora do escopo"
        },
        {
            "agent": "Interview Agent",
            "message": "c√≥digo I0 para industrializa√ß√£o",
            "expected": "Permitido - dentro do escopo",
            "description": "Pergunta sobre c√≥digo IVA dentro do escopo"
        },
        {
            "agent": "Usage Agent",
            "message": "como usar o sistema?",
            "expected": "Permitido - dentro do escopo",
            "description": "Pergunta sobre uso do sistema dentro do escopo"
        }
    ]
    
    print("Casos de teste:")
    print("-" * 60)
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. {case['description']}")
        print(f"   Agente: {case['agent']}")
        print(f"   Mensagem: '{case['message']}'")
        print(f"   Esperado: {case['expected']}")
        
        # Simular contexto
        context = Context()
        context.tool_arguments = f'{{"message": "{case["message"]}"}}'
        context.agent_name = case["agent"]
        
        # Criar dados de guardrail
        data = ToolInputGuardrailData(context=context)
        
        # Executar valida√ß√£o
        result = validate_agent_scope(data)
        
        # Verificar resultado
        if result.is_rejected:
            print(f"   ‚úÖ RESULTADO: BLOQUEADO - {result.message}")
        else:
            print(f"   ‚úÖ RESULTADO: PERMITIDO - {result.output_info}")
        
        print("-" * 60)
    
    print("\nüìä RESUMO DO TESTE")
    print("=" * 60)
    print("A nova l√≥gica de valida√ß√£o de escopo:")
    print("‚úÖ Usa descri√ß√µes espec√≠ficas de cada agente")
    print("‚úÖ Detecta t√≥picos fora do escopo empresarial")
    print("‚úÖ Permite perguntas relacionadas aos servi√ßos")
    print("‚úÖ Fornece mensagens de erro espec√≠ficas por agente")
    print("‚úÖ Sugere escopo correto quando bloqueia")
    
    # Testar configura√ß√£o
    print("\nüîß TESTE DE CONFIGURA√á√ÉO")
    print("=" * 60)
    
    descriptions = guardrail_config.get_agent_scope_descriptions()
    print(f"Descri√ß√µes carregadas: {len(descriptions)} agentes")
    
    for agent_name, agent_data in descriptions.items():
        scope = agent_data.get("scope", "")
        print(f"‚Ä¢ {agent_name}: {scope}")
    
    print("\n‚úÖ Nova l√≥gica de valida√ß√£o de escopo funcionando!")

if __name__ == "__main__":
    test_agent_scope_validation()
