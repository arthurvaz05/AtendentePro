#!/usr/bin/env python3
"""
Teste dos Guardrails com Valida√ß√£o de T√≥picos e C√≥digos IVA
Testa especificamente a valida√ß√£o de c√≥digos por t√≥pico
"""

import json
import re
import yaml
from unittest.mock import Mock
from pathlib import Path

# Simular a classe GuardrailConfig para teste
class TestGuardrailConfig:
    """Configura√ß√£o de teste para guardrails com t√≥picos"""
    
    def __init__(self):
        self.config = self._load_test_config()
    
    def _load_test_config(self):
        """Carrega configura√ß√£o de teste com t√≥picos"""
        return {
            "topics": {
                "compra_industrializacao": {
                    "description": "Compra para industrializa√ß√£o ‚Äî material manufaturado ou processo produtivo",
                    "codes": ["I0", "ID", "IE", "I8", "I5", "I9", "I2", "I7", "I1", "I3", "I4"]
                },
                "compra_comercializacao": {
                    "description": "Compra para comercializa√ß√£o ‚Äî produto para revenda sem altera√ß√£o",
                    "codes": ["R0", "ID", "R6", "R1", "R5", "R3", "R2", "R4"]
                },
                "aquisicao_energia_eletrica": {
                    "description": "Aquisi√ß√£o de energia el√©trica ‚Äî produtiva vs administrativa",
                    "codes": ["E1", "E2", "E3", "E4", "E0"]
                }
            },
            "valid_codes": ["I0", "ID", "IE", "R0", "R1", "E1", "E2"],  # Lista consolidada
            "off_topic_keywords": ["brasil", "bitcoin", "futebol"],
            "sensitive_words": ["hack", "fraude", "sonega√ß√£o"]
        }
    
    def get_topics(self):
        return self.config.get("topics", {})
    
    def get_codes_for_topic(self, topic_name: str):
        topics = self.get_topics()
        if topic_name in topics:
            return topics[topic_name].get("codes", [])
        return []
    
    def get_all_valid_codes_from_topics(self):
        all_codes = []
        topics = self.get_topics()
        for topic_data in topics.values():
            all_codes.extend(topic_data.get("codes", []))
        return list(set(all_codes))
    
    def get_valid_codes(self):
        return self.config.get("valid_codes", [])

# Inst√¢ncia de teste
test_config = TestGuardrailConfig()

def validate_business_codes(data):
    """Valida c√≥digos IVA - vers√£o gen√©rica"""
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return Mock(output_info="Argumentos JSON inv√°lidos")

    # Usar c√≥digos dos t√≥picos se dispon√≠vel
    valid_codes = test_config.get_all_valid_codes_from_topics()
    if not valid_codes:
        valid_codes = test_config.get_valid_codes()
    
    if not valid_codes:
        return Mock(output_info="Valida√ß√£o de c√≥digos n√£o configurada")

    for key, value in args.items():
        value_str = str(value)
        
        # Procurar por c√≥digos IVA no texto
        code_pattern = r'\b([A-Za-z]\d|[A-Za-z]{2})\b'  # Aceitar mai√∫sculas e min√∫sculas
        matches = re.findall(code_pattern, value_str)
        matches = [match.upper() for match in matches]  # Converter para mai√∫sculas
        
        for match in matches:
            if match not in valid_codes:
                return Mock(
                    output_info=None,
                    message=f"üö® C√≥digo IVA inv√°lido: '{match}' n√£o √© um c√≥digo v√°lido"
                )

    return Mock(output_info="C√≥digos IVA validados")

def validate_topic_and_codes(data):
    """Valida t√≥picos e c√≥digos espec√≠ficos por t√≥pico"""
    try:
        args = json.loads(data.context.tool_arguments) if data.context.tool_arguments else {}
    except json.JSONDecodeError:
        return Mock(output_info="Argumentos JSON inv√°lidos")

    topics = test_config.get_topics()
    
    if not topics:
        return Mock(output_info="Valida√ß√£o de t√≥picos n√£o configurada")

    for key, value in args.items():
        value_str = str(value).lower()
        
        # Procurar por c√≥digos IVA no texto
        code_pattern = r'\b([A-Za-z]\d|[A-Za-z]{2})\b'  # Aceitar mai√∫sculas e min√∫sculas
        matches = re.findall(code_pattern, value_str)
        matches = [match.upper() for match in matches]  # Converter para mai√∫sculas
        
        if matches:
            # Para cada c√≥digo encontrado, verificar se est√° no t√≥pico correto
            for code in matches:
                code_found_in_topic = False
                topic_for_code = None
                
                # Encontrar em qual t√≥pico o c√≥digo est√°
                for topic_name, topic_data in topics.items():
                    if code in topic_data.get("codes", []):
                        code_found_in_topic = True
                        topic_for_code = topic_name
                        break
                
                if not code_found_in_topic:
                    return Mock(
                        output_info=None,
                        message=f"üö® C√≥digo IVA '{code}' n√£o encontrado em nenhum t√≥pico v√°lido"
                    )
                
                # Verificar se o contexto da pergunta corresponde ao t√≥pico do c√≥digo
                topic_keywords = {
                    "compra_industrializacao": ["industrializa√ß√£o", "industrial", "produ√ß√£o", "manufaturado"],
                    "compra_comercializacao": ["comercializa√ß√£o", "revenda", "comercial"],
                    "aquisicao_energia_eletrica": ["energia", "el√©trica", "eletricidade"]
                }
                
                # Verificar se o contexto da pergunta corresponde ao t√≥pico
                context_matches = False
                if topic_for_code in topic_keywords:
                    for keyword in topic_keywords[topic_for_code]:
                        if keyword in value_str:
                            context_matches = True
                            break
                
                if not context_matches:
                    topic_description = topics[topic_for_code].get("description", "")
                    return Mock(
                        output_info=None,
                        message=f"üö® C√≥digo IVA '{code}' n√£o corresponde ao contexto da pergunta. Este c√≥digo √© para: {topic_description}"
                    )

    return Mock(output_info="T√≥picos e c√≥digos validados")

def test_valid_iva_code():
    """Testa c√≥digo IVA v√°lido"""
    
    print("üß™ TESTE: C√≥digo IVA V√°lido")
    print("=" * 50)
    print("Pergunta: 'Qual o c√≥digo IVA I0 para industrializa√ß√£o?'")
    print("=" * 50)
    
    # Simular dados de entrada com c√≥digo v√°lido
    valid_args = '{"query": "Qual o c√≥digo IVA I0 para industrializa√ß√£o?"}'
    
    # Criar mock data
    mock_data = Mock()
    mock_data.context = Mock()
    mock_data.context.tool_arguments = valid_args
    
    # Testar guardrail
    result = validate_business_codes(mock_data)
    
    print(f"Resultado: {result}")
    print(f"Permitido: {result.output_info is not None}")
    print(f"Mensagem: {result.output_info}")
    
    if result.output_info is not None:
        print("‚úÖ C√≥digo IVA v√°lido permitido!")
        return True
    else:
        print("‚ùå C√≥digo IVA v√°lido foi bloqueado!")
        return False

def test_invalid_iva_code():
    """Testa c√≥digo IVA inv√°lido"""
    
    print("\n" + "=" * 50)
    print("TESTE: C√≥digo IVA Inv√°lido")
    print("=" * 50)
    print("Pergunta: 'Qual o c√≥digo IVA Z9 para industrializa√ß√£o?'")
    print("=" * 50)
    
    # Simular dados de entrada com c√≥digo inv√°lido
    invalid_args = '{"query": "Qual o c√≥digo IVA Z9 para industrializa√ß√£o?"}'
    
    # Criar mock data
    mock_data = Mock()
    mock_data.context = Mock()
    mock_data.context.tool_arguments = invalid_args
    
    # Testar guardrail
    result = validate_business_codes(mock_data)
    
    print(f"Resultado: {result}")
    print(f"Bloqueado: {result.output_info is None}")
    print(f"Mensagem: {result.message}")
    
    if result.output_info is None:
        print("‚úÖ C√≥digo IVA inv√°lido bloqueado!")
        return True
    else:
        print("‚ùå C√≥digo IVA inv√°lido foi permitido!")
        return False

def test_topic_context_validation():
    """Testa valida√ß√£o de contexto por t√≥pico"""
    
    print("\n" + "=" * 50)
    print("TESTE: Valida√ß√£o de Contexto por T√≥pico")
    print("=" * 50)
    print("Pergunta: 'Qual o c√≥digo IVA E1 para futebol?'")
    print("C√≥digo E1 √© para energia el√©trica, mas contexto √© futebol")
    print("=" * 50)
    
    # Simular dados de entrada com c√≥digo correto mas contexto errado
    context_mismatch_args = '{"query": "Qual o c√≥digo IVA E1 para futebol?"}'
    
    # Criar mock data
    mock_data = Mock()
    mock_data.context = Mock()
    mock_data.context.tool_arguments = context_mismatch_args
    
    # Testar guardrail
    result = validate_topic_and_codes(mock_data)
    
    print(f"Resultado: {result}")
    print(f"Bloqueado: {result.output_info is None}")
    print(f"Mensagem: {result.message}")
    
    if result.output_info is None:
        print("‚úÖ Contexto incompat√≠vel bloqueado!")
        return True
    else:
        print("‚ùå Contexto incompat√≠vel foi permitido!")
        return False

def test_topic_context_correct():
    """Testa valida√ß√£o de contexto correto"""
    
    print("\n" + "=" * 50)
    print("TESTE: Contexto Correto")
    print("=" * 50)
    print("Pergunta: 'Qual o c√≥digo IVA E1 para energia el√©trica?'")
    print("C√≥digo E1 √© para energia el√©trica, contexto tamb√©m √© energia")
    print("=" * 50)
    
    # Simular dados de entrada com c√≥digo e contexto corretos
    correct_context_args = '{"query": "Qual o c√≥digo IVA E1 para energia el√©trica?"}'
    
    # Criar mock data
    mock_data = Mock()
    mock_data.context = Mock()
    mock_data.context.tool_arguments = correct_context_args
    
    # Testar guardrail
    result = validate_topic_and_codes(mock_data)
    
    print(f"Resultado: {result}")
    print(f"Permitido: {result.output_info is not None}")
    print(f"Mensagem: {result.output_info}")
    
    if result.output_info is not None:
        print("‚úÖ Contexto correto permitido!")
        return True
    else:
        print("‚ùå Contexto correto foi bloqueado!")
        return False

def test_topics_structure():
    """Testa estrutura de t√≥picos"""
    
    print("\n" + "=" * 50)
    print("TESTE: Estrutura de T√≥picos")
    print("=" * 50)
    
    topics = test_config.get_topics()
    
    print(f"‚úÖ T√≥picos carregados: {len(topics)}")
    for topic_name, topic_data in topics.items():
        codes = topic_data.get("codes", [])
        description = topic_data.get("description", "")
        print(f"   - {topic_name}: {len(codes)} c√≥digos")
        print(f"     Descri√ß√£o: {description[:50]}...")
        print(f"     C√≥digos: {codes[:3]}...")
    
    # Verificar c√≥digos espec√≠ficos
    industrial_codes = test_config.get_codes_for_topic("compra_industrializacao")
    energy_codes = test_config.get_codes_for_topic("aquisicao_energia_eletrica")
    
    assert "I0" in industrial_codes, "C√≥digo I0 deveria estar em industrializa√ß√£o"
    assert "E1" in energy_codes, "C√≥digo E1 deveria estar em energia el√©trica"
    
    print("‚úÖ Estrutura de t√≥picos carregada corretamente!")
    return True

if __name__ == "__main__":
    print("üõ°Ô∏è TESTE COMPLETO DOS GUARDRAILS COM T√ìPICOS")
    print("=" * 80)
    
    # Executar todos os testes
    test1 = test_valid_iva_code()
    test2 = test_invalid_iva_code()
    test3 = test_topic_context_validation()
    test4 = test_topic_context_correct()
    test5 = test_topics_structure()
    
    print("\n" + "=" * 80)
    print("üìã RESUMO DOS TESTES")
    print("=" * 80)
    print(f"‚úÖ C√≥digo IVA v√°lido permitido: {'SIM' if test1 else 'N√ÉO'}")
    print(f"‚úÖ C√≥digo IVA inv√°lido bloqueado: {'SIM' if test2 else 'N√ÉO'}")
    print(f"‚úÖ Contexto incompat√≠vel bloqueado: {'SIM' if test3 else 'N√ÉO'}")
    print(f"‚úÖ Contexto correto permitido: {'SIM' if test4 else 'N√ÉO'}")
    print(f"‚úÖ Estrutura de t√≥picos carregada: {'SIM' if test5 else 'N√ÉO'}")
    
    if test1 and test2 and test3 and test4 and test5:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("üõ°Ô∏è Sistema de guardrails com t√≥picos funcionando corretamente")
        print("üìÅ Valida√ß√£o de c√≥digos por t√≥pico implementada")
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM")
        print("üîß Sistema de guardrails precisa de ajustes")
    
    print("=" * 80)
